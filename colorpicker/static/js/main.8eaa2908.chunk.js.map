{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hue","saturation","lightness","backgroundColor","concat","_this2","react_default","a","createElement","className","map","key","style","getColor","onClick","setState","onFocus","tabIndex","renderPickerRow","_this3","renderPicker","js_default","maxValue","minValue","value","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAgEeA,iCAzDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,IAAK,EACLC,WAAY,EACZC,UAAW,KALIV,wEASVS,EAAYC,GACnB,MAAO,CAACC,gBAAe,OAAAC,OAAST,KAAKI,MAAMC,IAApB,MAAAI,OAA4BH,EAA5B,OAAAG,OAA4CF,EAA5C,+CAGTD,GAAY,IAAAI,EAAAV,KAC1B,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAAIC,IAAI,SAACR,GAAD,OAC5BI,EAAAC,EAAAC,cAAA,OACEG,IAAKT,EAAUD,EACfQ,UAAU,oBACVG,MAAOP,EAAKQ,SAASZ,EAAYC,GACjCY,QAAS,kBAAMT,EAAKU,SAAS,CAAEd,aAAYC,eAC3Cc,QAAS,kBAAMX,EAAKU,SAAS,CAAEd,aAAYC,eAC3Ce,SAAS,gDAQjB,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACZd,KAAKuB,gBAAgB,IACrBvB,KAAKuB,gBAAgB,IACrBvB,KAAKuB,gBAAgB,sCAKnB,IAAAC,EAAAxB,KACP,OACEW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuBG,MAAOjB,KAAKkB,SAASlB,KAAKI,MAAME,WAAYN,KAAKI,MAAMG,YAC3FI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZd,KAAKyB,eACNd,EAAAC,EAAAC,cAACa,EAAAd,EAAD,CACEe,SAAU,IACVC,SAAU,EACVC,MAAO7B,KAAKI,MAAMC,IAClByB,SAAU,SAAAzB,GAAG,OAAImB,EAAKJ,SAAS,CAAEf,oBAlD3B0B,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8eaa2908.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport InputRange from 'react-input-range';\nimport 'color-convert';\nimport 'react-input-range/lib/css/index.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hue: 0,\n      saturation: 0,\n      lightness: 100\n    }\n  }\n\n  getColor(saturation, lightness) {\n    return {backgroundColor: `hsl(${this.state.hue}, ${saturation}%, ${lightness}%)`};\n  }\n\n  renderPickerRow(saturation) {\n    return (\n      <div className=\"color-picker-row\">\n        {[20, 32, 44, 56, 68, 80].map((lightness) => (\n          <div\n            key={lightness+saturation}\n            className=\"color-picker-cell\"\n            style={this.getColor(saturation, lightness)}\n            onClick={() => this.setState({ saturation, lightness })}\n            onFocus={() => this.setState({ saturation, lightness })}\n            tabIndex=\"0\"\n          />\n        ))}\n      </div>\n    )\n  }\n\n  renderPicker() {\n    return (\n      <div className=\"color-picker-component\">\n        {this.renderPickerRow(30)}\n        {this.renderPickerRow(50)}\n        {this.renderPickerRow(80)}\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"color-picker-wrapper\" style={this.getColor(this.state.saturation, this.state.lightness)}>\n        <div className=\"color-picker\">\n          {this.renderPicker()}\n          <InputRange\n            maxValue={360}\n            minValue={0}\n            value={this.state.hue}\n            onChange={hue => this.setState({ hue })}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}